<?php
/**
 * BudgetAnalysis
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PocketSmith
 *
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BudgetAnalysis Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BudgetAnalysis implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BudgetAnalysis';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'start_date' => 'string',
        'end_date' => 'string',
        'currency_code' => 'string',
        'total_actual_amount' => 'float',
        'average_actual_amount' => 'float',
        'total_forecast_amount' => 'float',
        'average_forecast_amount' => 'float',
        'total_over_by' => 'float',
        'total_under_by' => 'float',
        'periods' => '\OpenAPI\Client\Model\Period[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'start_date' => null,
        'end_date' => null,
        'currency_code' => null,
        'total_actual_amount' => null,
        'average_actual_amount' => null,
        'total_forecast_amount' => null,
        'average_forecast_amount' => null,
        'total_over_by' => null,
        'total_under_by' => null,
        'periods' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'start_date' => false,
		'end_date' => false,
		'currency_code' => false,
		'total_actual_amount' => false,
		'average_actual_amount' => false,
		'total_forecast_amount' => false,
		'average_forecast_amount' => false,
		'total_over_by' => false,
		'total_under_by' => false,
		'periods' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'start_date' => 'start_date',
        'end_date' => 'end_date',
        'currency_code' => 'currency_code',
        'total_actual_amount' => 'total_actual_amount',
        'average_actual_amount' => 'average_actual_amount',
        'total_forecast_amount' => 'total_forecast_amount',
        'average_forecast_amount' => 'average_forecast_amount',
        'total_over_by' => 'total_over_by',
        'total_under_by' => 'total_under_by',
        'periods' => 'periods'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'currency_code' => 'setCurrencyCode',
        'total_actual_amount' => 'setTotalActualAmount',
        'average_actual_amount' => 'setAverageActualAmount',
        'total_forecast_amount' => 'setTotalForecastAmount',
        'average_forecast_amount' => 'setAverageForecastAmount',
        'total_over_by' => 'setTotalOverBy',
        'total_under_by' => 'setTotalUnderBy',
        'periods' => 'setPeriods'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'currency_code' => 'getCurrencyCode',
        'total_actual_amount' => 'getTotalActualAmount',
        'average_actual_amount' => 'getAverageActualAmount',
        'total_forecast_amount' => 'getTotalForecastAmount',
        'average_forecast_amount' => 'getAverageForecastAmount',
        'total_over_by' => 'getTotalOverBy',
        'total_under_by' => 'getTotalUnderBy',
        'periods' => 'getPeriods'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
        $this->setIfExists('total_actual_amount', $data ?? [], null);
        $this->setIfExists('average_actual_amount', $data ?? [], null);
        $this->setIfExists('total_forecast_amount', $data ?? [], null);
        $this->setIfExists('average_forecast_amount', $data ?? [], null);
        $this->setIfExists('total_over_by', $data ?? [], null);
        $this->setIfExists('total_under_by', $data ?? [], null);
        $this->setIfExists('periods', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets start_date
     *
     * @return string|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string|null $start_date The start date of the budget analysis.
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return string|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param string|null $end_date The end date of the budget analysis.
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code The currency of the budget analysis.
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        if (is_null($currency_code)) {
            throw new \InvalidArgumentException('non-nullable currency_code cannot be null');
        }
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets total_actual_amount
     *
     * @return float|null
     */
    public function getTotalActualAmount()
    {
        return $this->container['total_actual_amount'];
    }

    /**
     * Sets total_actual_amount
     *
     * @param float|null $total_actual_amount The total actual (transactions) amount across all periods.
     *
     * @return self
     */
    public function setTotalActualAmount($total_actual_amount)
    {
        if (is_null($total_actual_amount)) {
            throw new \InvalidArgumentException('non-nullable total_actual_amount cannot be null');
        }
        $this->container['total_actual_amount'] = $total_actual_amount;

        return $this;
    }

    /**
     * Gets average_actual_amount
     *
     * @return float|null
     */
    public function getAverageActualAmount()
    {
        return $this->container['average_actual_amount'];
    }

    /**
     * Sets average_actual_amount
     *
     * @param float|null $average_actual_amount The average actual (transactions) amount across all periods.
     *
     * @return self
     */
    public function setAverageActualAmount($average_actual_amount)
    {
        if (is_null($average_actual_amount)) {
            throw new \InvalidArgumentException('non-nullable average_actual_amount cannot be null');
        }
        $this->container['average_actual_amount'] = $average_actual_amount;

        return $this;
    }

    /**
     * Gets total_forecast_amount
     *
     * @return float|null
     */
    public function getTotalForecastAmount()
    {
        return $this->container['total_forecast_amount'];
    }

    /**
     * Sets total_forecast_amount
     *
     * @param float|null $total_forecast_amount The total budgeted amount across all periods.
     *
     * @return self
     */
    public function setTotalForecastAmount($total_forecast_amount)
    {
        if (is_null($total_forecast_amount)) {
            throw new \InvalidArgumentException('non-nullable total_forecast_amount cannot be null');
        }
        $this->container['total_forecast_amount'] = $total_forecast_amount;

        return $this;
    }

    /**
     * Gets average_forecast_amount
     *
     * @return float|null
     */
    public function getAverageForecastAmount()
    {
        return $this->container['average_forecast_amount'];
    }

    /**
     * Sets average_forecast_amount
     *
     * @param float|null $average_forecast_amount The average budgeted amount across all periods.
     *
     * @return self
     */
    public function setAverageForecastAmount($average_forecast_amount)
    {
        if (is_null($average_forecast_amount)) {
            throw new \InvalidArgumentException('non-nullable average_forecast_amount cannot be null');
        }
        $this->container['average_forecast_amount'] = $average_forecast_amount;

        return $this;
    }

    /**
     * Gets total_over_by
     *
     * @return float|null
     */
    public function getTotalOverBy()
    {
        return $this->container['total_over_by'];
    }

    /**
     * Sets total_over_by
     *
     * @param float|null $total_over_by The total amount the budget was exceeded across all periods.
     *
     * @return self
     */
    public function setTotalOverBy($total_over_by)
    {
        if (is_null($total_over_by)) {
            throw new \InvalidArgumentException('non-nullable total_over_by cannot be null');
        }
        $this->container['total_over_by'] = $total_over_by;

        return $this;
    }

    /**
     * Gets total_under_by
     *
     * @return float|null
     */
    public function getTotalUnderBy()
    {
        return $this->container['total_under_by'];
    }

    /**
     * Sets total_under_by
     *
     * @param float|null $total_under_by The total amount the budget was under by across all periods.
     *
     * @return self
     */
    public function setTotalUnderBy($total_under_by)
    {
        if (is_null($total_under_by)) {
            throw new \InvalidArgumentException('non-nullable total_under_by cannot be null');
        }
        $this->container['total_under_by'] = $total_under_by;

        return $this;
    }

    /**
     * Gets periods
     *
     * @return \OpenAPI\Client\Model\Period[]|null
     */
    public function getPeriods()
    {
        return $this->container['periods'];
    }

    /**
     * Sets periods
     *
     * @param \OpenAPI\Client\Model\Period[]|null $periods The period analyses that this budget analysis comprises.
     *
     * @return self
     */
    public function setPeriods($periods)
    {
        if (is_null($periods)) {
            throw new \InvalidArgumentException('non-nullable periods cannot be null');
        }
        $this->container['periods'] = $periods;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


