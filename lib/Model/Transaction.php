<?php
/**
 * Transaction
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PocketSmith
 *
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Transaction Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Transaction implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Transaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cheque_number' => 'string',
        'type' => 'string',
        'memo' => 'string',
        'payee' => 'string',
        'amount' => 'float',
        'amount_in_base_currency' => 'float',
        'date' => 'string',
        'is_transfer' => 'bool',
        'category' => '\OpenAPI\Client\Model\Category',
        'note' => 'string',
        'labels' => 'string[]',
        'id' => 'int',
        'original_payee' => 'string',
        'upload_source' => 'string',
        'closing_balance' => 'float',
        'transaction_account' => '\OpenAPI\Client\Model\TransactionAccount',
        'status' => 'string',
        'needs_review' => 'bool',
        'created_at' => 'string',
        'updated_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cheque_number' => null,
        'type' => null,
        'memo' => null,
        'payee' => null,
        'amount' => null,
        'amount_in_base_currency' => null,
        'date' => null,
        'is_transfer' => null,
        'category' => null,
        'note' => null,
        'labels' => null,
        'id' => null,
        'original_payee' => null,
        'upload_source' => null,
        'closing_balance' => null,
        'transaction_account' => null,
        'status' => null,
        'needs_review' => null,
        'created_at' => null,
        'updated_at' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'cheque_number' => false,
		'type' => false,
		'memo' => false,
		'payee' => false,
		'amount' => false,
		'amount_in_base_currency' => false,
		'date' => false,
		'is_transfer' => false,
		'category' => false,
		'note' => false,
		'labels' => false,
		'id' => false,
		'original_payee' => false,
		'upload_source' => false,
		'closing_balance' => false,
		'transaction_account' => false,
		'status' => false,
		'needs_review' => false,
		'created_at' => false,
		'updated_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cheque_number' => 'cheque_number',
        'type' => 'type',
        'memo' => 'memo',
        'payee' => 'payee',
        'amount' => 'amount',
        'amount_in_base_currency' => 'amount_in_base_currency',
        'date' => 'date',
        'is_transfer' => 'is_transfer',
        'category' => 'category',
        'note' => 'note',
        'labels' => 'labels',
        'id' => 'id',
        'original_payee' => 'original_payee',
        'upload_source' => 'upload_source',
        'closing_balance' => 'closing_balance',
        'transaction_account' => 'transaction_account',
        'status' => 'status',
        'needs_review' => 'needs_review',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cheque_number' => 'setChequeNumber',
        'type' => 'setType',
        'memo' => 'setMemo',
        'payee' => 'setPayee',
        'amount' => 'setAmount',
        'amount_in_base_currency' => 'setAmountInBaseCurrency',
        'date' => 'setDate',
        'is_transfer' => 'setIsTransfer',
        'category' => 'setCategory',
        'note' => 'setNote',
        'labels' => 'setLabels',
        'id' => 'setId',
        'original_payee' => 'setOriginalPayee',
        'upload_source' => 'setUploadSource',
        'closing_balance' => 'setClosingBalance',
        'transaction_account' => 'setTransactionAccount',
        'status' => 'setStatus',
        'needs_review' => 'setNeedsReview',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cheque_number' => 'getChequeNumber',
        'type' => 'getType',
        'memo' => 'getMemo',
        'payee' => 'getPayee',
        'amount' => 'getAmount',
        'amount_in_base_currency' => 'getAmountInBaseCurrency',
        'date' => 'getDate',
        'is_transfer' => 'getIsTransfer',
        'category' => 'getCategory',
        'note' => 'getNote',
        'labels' => 'getLabels',
        'id' => 'getId',
        'original_payee' => 'getOriginalPayee',
        'upload_source' => 'getUploadSource',
        'closing_balance' => 'getClosingBalance',
        'transaction_account' => 'getTransactionAccount',
        'status' => 'getStatus',
        'needs_review' => 'getNeedsReview',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_DEBIT = 'debit';
    public const TYPE_CREDIT = 'credit';
    public const STATUS_PENDING = 'pending';
    public const STATUS_POSTED = 'posted';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_DEBIT,
            self::TYPE_CREDIT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_PENDING,
            self::STATUS_POSTED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('cheque_number', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('memo', $data ?? [], null);
        $this->setIfExists('payee', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('amount_in_base_currency', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('is_transfer', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('labels', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('original_payee', $data ?? [], null);
        $this->setIfExists('upload_source', $data ?? [], null);
        $this->setIfExists('closing_balance', $data ?? [], null);
        $this->setIfExists('transaction_account', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('needs_review', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cheque_number
     *
     * @return string|null
     */
    public function getChequeNumber()
    {
        return $this->container['cheque_number'];
    }

    /**
     * Sets cheque_number
     *
     * @param string|null $cheque_number cheque_number
     *
     * @return self
     */
    public function setChequeNumber($cheque_number)
    {
        if (is_null($cheque_number)) {
            throw new \InvalidArgumentException('non-nullable cheque_number cannot be null');
        }
        $this->container['cheque_number'] = $cheque_number;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Whether the transaction is a debit or a credit
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets memo
     *
     * @return string|null
     */
    public function getMemo()
    {
        return $this->container['memo'];
    }

    /**
     * Sets memo
     *
     * @param string|null $memo memo
     *
     * @return self
     */
    public function setMemo($memo)
    {
        if (is_null($memo)) {
            throw new \InvalidArgumentException('non-nullable memo cannot be null');
        }
        $this->container['memo'] = $memo;

        return $this;
    }

    /**
     * Gets payee
     *
     * @return string|null
     */
    public function getPayee()
    {
        return $this->container['payee'];
    }

    /**
     * Sets payee
     *
     * @param string|null $payee The payee/merchant of the transaction.
     *
     * @return self
     */
    public function setPayee($payee)
    {
        if (is_null($payee)) {
            throw new \InvalidArgumentException('non-nullable payee cannot be null');
        }
        $this->container['payee'] = $payee;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets amount_in_base_currency
     *
     * @return float|null
     */
    public function getAmountInBaseCurrency()
    {
        return $this->container['amount_in_base_currency'];
    }

    /**
     * Sets amount_in_base_currency
     *
     * @param float|null $amount_in_base_currency The amount of the transaction in the user's base currency.
     *
     * @return self
     */
    public function setAmountInBaseCurrency($amount_in_base_currency)
    {
        if (is_null($amount_in_base_currency)) {
            throw new \InvalidArgumentException('non-nullable amount_in_base_currency cannot be null');
        }
        $this->container['amount_in_base_currency'] = $amount_in_base_currency;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string|null $date The date the transaction took place.
     *
     * @return self
     */
    public function setDate($date)
    {
        if (is_null($date)) {
            throw new \InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets is_transfer
     *
     * @return bool|null
     */
    public function getIsTransfer()
    {
        return $this->container['is_transfer'];
    }

    /**
     * Sets is_transfer
     *
     * @param bool|null $is_transfer Whether the transaction is a transfer.
     *
     * @return self
     */
    public function setIsTransfer($is_transfer)
    {
        if (is_null($is_transfer)) {
            throw new \InvalidArgumentException('non-nullable is_transfer cannot be null');
        }
        $this->container['is_transfer'] = $is_transfer;

        return $this;
    }

    /**
     * Gets category
     *
     * @return \OpenAPI\Client\Model\Category|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \OpenAPI\Client\Model\Category|null $category category
     *
     * @return self
     */
    public function setCategory($category)
    {
        if (is_null($category)) {
            throw new \InvalidArgumentException('non-nullable category cannot be null');
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note note
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            throw new \InvalidArgumentException('non-nullable note cannot be null');
        }
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return string[]|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param string[]|null $labels labels
     *
     * @return self
     */
    public function setLabels($labels)
    {
        if (is_null($labels)) {
            throw new \InvalidArgumentException('non-nullable labels cannot be null');
        }
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The unique identifier of the transaction.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets original_payee
     *
     * @return string|null
     */
    public function getOriginalPayee()
    {
        return $this->container['original_payee'];
    }

    /**
     * Sets original_payee
     *
     * @param string|null $original_payee The payee the transaction was created with.
     *
     * @return self
     */
    public function setOriginalPayee($original_payee)
    {
        if (is_null($original_payee)) {
            throw new \InvalidArgumentException('non-nullable original_payee cannot be null');
        }
        $this->container['original_payee'] = $original_payee;

        return $this;
    }

    /**
     * Gets upload_source
     *
     * @return string|null
     */
    public function getUploadSource()
    {
        return $this->container['upload_source'];
    }

    /**
     * Sets upload_source
     *
     * @param string|null $upload_source Where the transaction came from.
     *
     * @return self
     */
    public function setUploadSource($upload_source)
    {
        if (is_null($upload_source)) {
            throw new \InvalidArgumentException('non-nullable upload_source cannot be null');
        }
        $this->container['upload_source'] = $upload_source;

        return $this;
    }

    /**
     * Gets closing_balance
     *
     * @return float|null
     */
    public function getClosingBalance()
    {
        return $this->container['closing_balance'];
    }

    /**
     * Sets closing_balance
     *
     * @param float|null $closing_balance The closing balance of the account at the transaction.
     *
     * @return self
     */
    public function setClosingBalance($closing_balance)
    {
        if (is_null($closing_balance)) {
            throw new \InvalidArgumentException('non-nullable closing_balance cannot be null');
        }
        $this->container['closing_balance'] = $closing_balance;

        return $this;
    }

    /**
     * Gets transaction_account
     *
     * @return \OpenAPI\Client\Model\TransactionAccount|null
     */
    public function getTransactionAccount()
    {
        return $this->container['transaction_account'];
    }

    /**
     * Sets transaction_account
     *
     * @param \OpenAPI\Client\Model\TransactionAccount|null $transaction_account transaction_account
     *
     * @return self
     */
    public function setTransactionAccount($transaction_account)
    {
        if (is_null($transaction_account)) {
            throw new \InvalidArgumentException('non-nullable transaction_account cannot be null');
        }
        $this->container['transaction_account'] = $transaction_account;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The status of the transaction. Pending transactions are temporary and may be superseded later by their posted counterparts, which are permanent.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets needs_review
     *
     * @return bool|null
     */
    public function getNeedsReview()
    {
        return $this->container['needs_review'];
    }

    /**
     * Sets needs_review
     *
     * @param bool|null $needs_review Whether the transaction needs to be reviewed.
     *
     * @return self
     */
    public function setNeedsReview($needs_review)
    {
        if (is_null($needs_review)) {
            throw new \InvalidArgumentException('non-nullable needs_review cannot be null');
        }
        $this->container['needs_review'] = $needs_review;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at When the transaction was created.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at When the transaction was last updated.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


