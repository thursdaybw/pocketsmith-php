<?php
/**
 * Scenario
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PocketSmith
 *
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Scenario Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Scenario implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Scenario';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'title' => 'string',
        'description' => 'string',
        'interest_rate' => 'float',
        'interest_rate_repeat_id' => 'int',
        'type' => 'string',
        'minimum_value' => 'float',
        'maximum_value' => 'float',
        'achieve_date' => 'string',
        'starting_balance' => 'float',
        'starting_balance_date' => 'string',
        'closing_balance' => 'float',
        'closing_balance_date' => 'string',
        'current_balance' => 'float',
        'current_balance_date' => 'string',
        'current_balance_in_base_currency' => 'float',
        'current_balance_exchange_rate' => 'float',
        'safe_balance' => 'float',
        'safe_balance_in_base_currency' => 'float',
        'created_at' => 'string',
        'updated_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'title' => null,
        'description' => null,
        'interest_rate' => null,
        'interest_rate_repeat_id' => null,
        'type' => null,
        'minimum_value' => null,
        'maximum_value' => null,
        'achieve_date' => null,
        'starting_balance' => null,
        'starting_balance_date' => null,
        'closing_balance' => null,
        'closing_balance_date' => null,
        'current_balance' => null,
        'current_balance_date' => null,
        'current_balance_in_base_currency' => null,
        'current_balance_exchange_rate' => null,
        'safe_balance' => null,
        'safe_balance_in_base_currency' => null,
        'created_at' => null,
        'updated_at' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'title' => false,
		'description' => false,
		'interest_rate' => false,
		'interest_rate_repeat_id' => false,
		'type' => false,
		'minimum_value' => false,
		'maximum_value' => false,
		'achieve_date' => false,
		'starting_balance' => false,
		'starting_balance_date' => false,
		'closing_balance' => false,
		'closing_balance_date' => false,
		'current_balance' => false,
		'current_balance_date' => false,
		'current_balance_in_base_currency' => false,
		'current_balance_exchange_rate' => false,
		'safe_balance' => false,
		'safe_balance_in_base_currency' => false,
		'created_at' => false,
		'updated_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'title' => 'title',
        'description' => 'description',
        'interest_rate' => 'interest_rate',
        'interest_rate_repeat_id' => 'interest_rate_repeat_id',
        'type' => 'type',
        'minimum_value' => 'minimum-value',
        'maximum_value' => 'maximum-value',
        'achieve_date' => 'achieve_date',
        'starting_balance' => 'starting_balance',
        'starting_balance_date' => 'starting_balance_date',
        'closing_balance' => 'closing_balance',
        'closing_balance_date' => 'closing_balance_date',
        'current_balance' => 'current_balance',
        'current_balance_date' => 'current_balance_date',
        'current_balance_in_base_currency' => 'current_balance_in_base_currency',
        'current_balance_exchange_rate' => 'current_balance_exchange_rate',
        'safe_balance' => 'safe_balance',
        'safe_balance_in_base_currency' => 'safe_balance_in_base_currency',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'interest_rate' => 'setInterestRate',
        'interest_rate_repeat_id' => 'setInterestRateRepeatId',
        'type' => 'setType',
        'minimum_value' => 'setMinimumValue',
        'maximum_value' => 'setMaximumValue',
        'achieve_date' => 'setAchieveDate',
        'starting_balance' => 'setStartingBalance',
        'starting_balance_date' => 'setStartingBalanceDate',
        'closing_balance' => 'setClosingBalance',
        'closing_balance_date' => 'setClosingBalanceDate',
        'current_balance' => 'setCurrentBalance',
        'current_balance_date' => 'setCurrentBalanceDate',
        'current_balance_in_base_currency' => 'setCurrentBalanceInBaseCurrency',
        'current_balance_exchange_rate' => 'setCurrentBalanceExchangeRate',
        'safe_balance' => 'setSafeBalance',
        'safe_balance_in_base_currency' => 'setSafeBalanceInBaseCurrency',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'interest_rate' => 'getInterestRate',
        'interest_rate_repeat_id' => 'getInterestRateRepeatId',
        'type' => 'getType',
        'minimum_value' => 'getMinimumValue',
        'maximum_value' => 'getMaximumValue',
        'achieve_date' => 'getAchieveDate',
        'starting_balance' => 'getStartingBalance',
        'starting_balance_date' => 'getStartingBalanceDate',
        'closing_balance' => 'getClosingBalance',
        'closing_balance_date' => 'getClosingBalanceDate',
        'current_balance' => 'getCurrentBalance',
        'current_balance_date' => 'getCurrentBalanceDate',
        'current_balance_in_base_currency' => 'getCurrentBalanceInBaseCurrency',
        'current_balance_exchange_rate' => 'getCurrentBalanceExchangeRate',
        'safe_balance' => 'getSafeBalance',
        'safe_balance_in_base_currency' => 'getSafeBalanceInBaseCurrency',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_NO_INTEREST = 'no-interest';
    public const TYPE_SAVINGS = 'savings';
    public const TYPE_DEBT = 'debt';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_NO_INTEREST,
            self::TYPE_SAVINGS,
            self::TYPE_DEBT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('interest_rate', $data ?? [], null);
        $this->setIfExists('interest_rate_repeat_id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('minimum_value', $data ?? [], null);
        $this->setIfExists('maximum_value', $data ?? [], null);
        $this->setIfExists('achieve_date', $data ?? [], null);
        $this->setIfExists('starting_balance', $data ?? [], null);
        $this->setIfExists('starting_balance_date', $data ?? [], null);
        $this->setIfExists('closing_balance', $data ?? [], null);
        $this->setIfExists('closing_balance_date', $data ?? [], null);
        $this->setIfExists('current_balance', $data ?? [], null);
        $this->setIfExists('current_balance_date', $data ?? [], null);
        $this->setIfExists('current_balance_in_base_currency', $data ?? [], null);
        $this->setIfExists('current_balance_exchange_rate', $data ?? [], null);
        $this->setIfExists('safe_balance', $data ?? [], null);
        $this->setIfExists('safe_balance_in_base_currency', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The unique identifier of the scenario.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title The title of the scenario.
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description A short description of what the scenario is modelling.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets interest_rate
     *
     * @return float|null
     */
    public function getInterestRate()
    {
        return $this->container['interest_rate'];
    }

    /**
     * Sets interest_rate
     *
     * @param float|null $interest_rate The amount of interest to apply to the balance. Will apply periodically depending on what `interest_rate_repeat_id` is set to.
     *
     * @return self
     */
    public function setInterestRate($interest_rate)
    {
        if (is_null($interest_rate)) {
            throw new \InvalidArgumentException('non-nullable interest_rate cannot be null');
        }
        $this->container['interest_rate'] = $interest_rate;

        return $this;
    }

    /**
     * Gets interest_rate_repeat_id
     *
     * @return int|null
     */
    public function getInterestRateRepeatId()
    {
        return $this->container['interest_rate_repeat_id'];
    }

    /**
     * Sets interest_rate_repeat_id
     *
     * @param int|null $interest_rate_repeat_id A number representing how often the interest should be applied. 0 is used for no interest, 2 is weekly, 3 is fortnightly, 4 is monthly, 5 is yearly and 7 for quarterly.
     *
     * @return self
     */
    public function setInterestRateRepeatId($interest_rate_repeat_id)
    {
        if (is_null($interest_rate_repeat_id)) {
            throw new \InvalidArgumentException('non-nullable interest_rate_repeat_id cannot be null');
        }
        $this->container['interest_rate_repeat_id'] = $interest_rate_repeat_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The type of the scenario.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets minimum_value
     *
     * @return float|null
     */
    public function getMinimumValue()
    {
        return $this->container['minimum_value'];
    }

    /**
     * Sets minimum_value
     *
     * @param float|null $minimum_value minimum_value
     *
     * @return self
     */
    public function setMinimumValue($minimum_value)
    {
        if (is_null($minimum_value)) {
            throw new \InvalidArgumentException('non-nullable minimum_value cannot be null');
        }
        $this->container['minimum_value'] = $minimum_value;

        return $this;
    }

    /**
     * Gets maximum_value
     *
     * @return float|null
     */
    public function getMaximumValue()
    {
        return $this->container['maximum_value'];
    }

    /**
     * Sets maximum_value
     *
     * @param float|null $maximum_value maximum_value
     *
     * @return self
     */
    public function setMaximumValue($maximum_value)
    {
        if (is_null($maximum_value)) {
            throw new \InvalidArgumentException('non-nullable maximum_value cannot be null');
        }
        $this->container['maximum_value'] = $maximum_value;

        return $this;
    }

    /**
     * Gets achieve_date
     *
     * @return string|null
     */
    public function getAchieveDate()
    {
        return $this->container['achieve_date'];
    }

    /**
     * Sets achieve_date
     *
     * @param string|null $achieve_date For goals, the date that they should be achieved by.
     *
     * @return self
     */
    public function setAchieveDate($achieve_date)
    {
        if (is_null($achieve_date)) {
            throw new \InvalidArgumentException('non-nullable achieve_date cannot be null');
        }
        $this->container['achieve_date'] = $achieve_date;

        return $this;
    }

    /**
     * Gets starting_balance
     *
     * @return float|null
     */
    public function getStartingBalance()
    {
        return $this->container['starting_balance'];
    }

    /**
     * Sets starting_balance
     *
     * @param float|null $starting_balance The starting balance of the scenario.
     *
     * @return self
     */
    public function setStartingBalance($starting_balance)
    {
        if (is_null($starting_balance)) {
            throw new \InvalidArgumentException('non-nullable starting_balance cannot be null');
        }
        $this->container['starting_balance'] = $starting_balance;

        return $this;
    }

    /**
     * Gets starting_balance_date
     *
     * @return string|null
     */
    public function getStartingBalanceDate()
    {
        return $this->container['starting_balance_date'];
    }

    /**
     * Sets starting_balance_date
     *
     * @param string|null $starting_balance_date The date of the starting balance.
     *
     * @return self
     */
    public function setStartingBalanceDate($starting_balance_date)
    {
        if (is_null($starting_balance_date)) {
            throw new \InvalidArgumentException('non-nullable starting_balance_date cannot be null');
        }
        $this->container['starting_balance_date'] = $starting_balance_date;

        return $this;
    }

    /**
     * Gets closing_balance
     *
     * @return float|null
     */
    public function getClosingBalance()
    {
        return $this->container['closing_balance'];
    }

    /**
     * Sets closing_balance
     *
     * @param float|null $closing_balance The closing balance of the scenario.
     *
     * @return self
     */
    public function setClosingBalance($closing_balance)
    {
        if (is_null($closing_balance)) {
            throw new \InvalidArgumentException('non-nullable closing_balance cannot be null');
        }
        $this->container['closing_balance'] = $closing_balance;

        return $this;
    }

    /**
     * Gets closing_balance_date
     *
     * @return string|null
     */
    public function getClosingBalanceDate()
    {
        return $this->container['closing_balance_date'];
    }

    /**
     * Sets closing_balance_date
     *
     * @param string|null $closing_balance_date The date of the closing balance.
     *
     * @return self
     */
    public function setClosingBalanceDate($closing_balance_date)
    {
        if (is_null($closing_balance_date)) {
            throw new \InvalidArgumentException('non-nullable closing_balance_date cannot be null');
        }
        $this->container['closing_balance_date'] = $closing_balance_date;

        return $this;
    }

    /**
     * Gets current_balance
     *
     * @return float|null
     */
    public function getCurrentBalance()
    {
        return $this->container['current_balance'];
    }

    /**
     * Sets current_balance
     *
     * @param float|null $current_balance The current balance of the scenario.
     *
     * @return self
     */
    public function setCurrentBalance($current_balance)
    {
        if (is_null($current_balance)) {
            throw new \InvalidArgumentException('non-nullable current_balance cannot be null');
        }
        $this->container['current_balance'] = $current_balance;

        return $this;
    }

    /**
     * Gets current_balance_date
     *
     * @return string|null
     */
    public function getCurrentBalanceDate()
    {
        return $this->container['current_balance_date'];
    }

    /**
     * Sets current_balance_date
     *
     * @param string|null $current_balance_date The date of the current balance.
     *
     * @return self
     */
    public function setCurrentBalanceDate($current_balance_date)
    {
        if (is_null($current_balance_date)) {
            throw new \InvalidArgumentException('non-nullable current_balance_date cannot be null');
        }
        $this->container['current_balance_date'] = $current_balance_date;

        return $this;
    }

    /**
     * Gets current_balance_in_base_currency
     *
     * @return float|null
     */
    public function getCurrentBalanceInBaseCurrency()
    {
        return $this->container['current_balance_in_base_currency'];
    }

    /**
     * Sets current_balance_in_base_currency
     *
     * @param float|null $current_balance_in_base_currency The current balance of the scenario in the user's base currency.
     *
     * @return self
     */
    public function setCurrentBalanceInBaseCurrency($current_balance_in_base_currency)
    {
        if (is_null($current_balance_in_base_currency)) {
            throw new \InvalidArgumentException('non-nullable current_balance_in_base_currency cannot be null');
        }
        $this->container['current_balance_in_base_currency'] = $current_balance_in_base_currency;

        return $this;
    }

    /**
     * Gets current_balance_exchange_rate
     *
     * @return float|null
     */
    public function getCurrentBalanceExchangeRate()
    {
        return $this->container['current_balance_exchange_rate'];
    }

    /**
     * Sets current_balance_exchange_rate
     *
     * @param float|null $current_balance_exchange_rate The exchange rate between the scenario's currency and the user's base currency, when different. If the currencies are the same, null is returned.
     *
     * @return self
     */
    public function setCurrentBalanceExchangeRate($current_balance_exchange_rate)
    {
        if (is_null($current_balance_exchange_rate)) {
            throw new \InvalidArgumentException('non-nullable current_balance_exchange_rate cannot be null');
        }
        $this->container['current_balance_exchange_rate'] = $current_balance_exchange_rate;

        return $this;
    }

    /**
     * Gets safe_balance
     *
     * @return float|null
     */
    public function getSafeBalance()
    {
        return $this->container['safe_balance'];
    }

    /**
     * Sets safe_balance
     *
     * @param float|null $safe_balance The current safe balance in the user's base currency, if safe balance is activated on the account associated with the scenario. If safe balance is not activated, then null is returned.
     *
     * @return self
     */
    public function setSafeBalance($safe_balance)
    {
        if (is_null($safe_balance)) {
            throw new \InvalidArgumentException('non-nullable safe_balance cannot be null');
        }
        $this->container['safe_balance'] = $safe_balance;

        return $this;
    }

    /**
     * Gets safe_balance_in_base_currency
     *
     * @return float|null
     */
    public function getSafeBalanceInBaseCurrency()
    {
        return $this->container['safe_balance_in_base_currency'];
    }

    /**
     * Sets safe_balance_in_base_currency
     *
     * @param float|null $safe_balance_in_base_currency The current safe balance in the user's base currency, if safe balance is activated on the account associated with the scenario. If safe balance is not available, then null is returned.
     *
     * @return self
     */
    public function setSafeBalanceInBaseCurrency($safe_balance_in_base_currency)
    {
        if (is_null($safe_balance_in_base_currency)) {
            throw new \InvalidArgumentException('non-nullable safe_balance_in_base_currency cannot be null');
        }
        $this->container['safe_balance_in_base_currency'] = $safe_balance_in_base_currency;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at When the scenario was created.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at When the scenario was last updated.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


