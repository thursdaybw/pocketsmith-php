<?php
/**
 * Period
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PocketSmith
 *
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Period Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Period implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Period';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'start_date' => 'string',
        'end_date' => 'string',
        'currency_code' => 'string',
        'actual_amount' => 'float',
        'forecast_amount' => 'float',
        'refund_amount' => 'float',
        'current' => 'bool',
        'over_budget' => 'bool',
        'under_budget' => 'bool',
        'over_by' => 'float',
        'under_by' => 'float',
        'percentage_used' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'start_date' => null,
        'end_date' => null,
        'currency_code' => null,
        'actual_amount' => null,
        'forecast_amount' => null,
        'refund_amount' => null,
        'current' => null,
        'over_budget' => null,
        'under_budget' => null,
        'over_by' => null,
        'under_by' => null,
        'percentage_used' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'start_date' => false,
		'end_date' => false,
		'currency_code' => false,
		'actual_amount' => false,
		'forecast_amount' => false,
		'refund_amount' => false,
		'current' => false,
		'over_budget' => false,
		'under_budget' => false,
		'over_by' => false,
		'under_by' => false,
		'percentage_used' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'start_date' => 'start_date',
        'end_date' => 'end_date',
        'currency_code' => 'currency_code',
        'actual_amount' => 'actual_amount',
        'forecast_amount' => 'forecast_amount',
        'refund_amount' => 'refund_amount',
        'current' => 'current',
        'over_budget' => 'over_budget',
        'under_budget' => 'under_budget',
        'over_by' => 'over_by',
        'under_by' => 'under_by',
        'percentage_used' => 'percentage_used'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'currency_code' => 'setCurrencyCode',
        'actual_amount' => 'setActualAmount',
        'forecast_amount' => 'setForecastAmount',
        'refund_amount' => 'setRefundAmount',
        'current' => 'setCurrent',
        'over_budget' => 'setOverBudget',
        'under_budget' => 'setUnderBudget',
        'over_by' => 'setOverBy',
        'under_by' => 'setUnderBy',
        'percentage_used' => 'setPercentageUsed'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'currency_code' => 'getCurrencyCode',
        'actual_amount' => 'getActualAmount',
        'forecast_amount' => 'getForecastAmount',
        'refund_amount' => 'getRefundAmount',
        'current' => 'getCurrent',
        'over_budget' => 'getOverBudget',
        'under_budget' => 'getUnderBudget',
        'over_by' => 'getOverBy',
        'under_by' => 'getUnderBy',
        'percentage_used' => 'getPercentageUsed'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
        $this->setIfExists('actual_amount', $data ?? [], null);
        $this->setIfExists('forecast_amount', $data ?? [], null);
        $this->setIfExists('refund_amount', $data ?? [], null);
        $this->setIfExists('current', $data ?? [], null);
        $this->setIfExists('over_budget', $data ?? [], null);
        $this->setIfExists('under_budget', $data ?? [], null);
        $this->setIfExists('over_by', $data ?? [], null);
        $this->setIfExists('under_by', $data ?? [], null);
        $this->setIfExists('percentage_used', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets start_date
     *
     * @return string|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string|null $start_date The start date of the period.
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return string|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param string|null $end_date The end date of the period.
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code The currency of the period.
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        if (is_null($currency_code)) {
            throw new \InvalidArgumentException('non-nullable currency_code cannot be null');
        }
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets actual_amount
     *
     * @return float|null
     */
    public function getActualAmount()
    {
        return $this->container['actual_amount'];
    }

    /**
     * Sets actual_amount
     *
     * @param float|null $actual_amount The sum of all actuals (transactions) in the period.
     *
     * @return self
     */
    public function setActualAmount($actual_amount)
    {
        if (is_null($actual_amount)) {
            throw new \InvalidArgumentException('non-nullable actual_amount cannot be null');
        }
        $this->container['actual_amount'] = $actual_amount;

        return $this;
    }

    /**
     * Gets forecast_amount
     *
     * @return float|null
     */
    public function getForecastAmount()
    {
        return $this->container['forecast_amount'];
    }

    /**
     * Sets forecast_amount
     *
     * @param float|null $forecast_amount The sum of all forecast sources (budget events) in the period, for comparison against the actual amount.
     *
     * @return self
     */
    public function setForecastAmount($forecast_amount)
    {
        if (is_null($forecast_amount)) {
            throw new \InvalidArgumentException('non-nullable forecast_amount cannot be null');
        }
        $this->container['forecast_amount'] = $forecast_amount;

        return $this;
    }

    /**
     * Gets refund_amount
     *
     * @return float|null
     */
    public function getRefundAmount()
    {
        return $this->container['refund_amount'];
    }

    /**
     * Sets refund_amount
     *
     * @param float|null $refund_amount This attribute tracks the amount that has been refunded or deducted to the actual amount. When a category is set to \"always expense\", any credit transactions are treated as refunds and when set to \"always income\", any debit transactions are treated as deductions.
     *
     * @return self
     */
    public function setRefundAmount($refund_amount)
    {
        if (is_null($refund_amount)) {
            throw new \InvalidArgumentException('non-nullable refund_amount cannot be null');
        }
        $this->container['refund_amount'] = $refund_amount;

        return $this;
    }

    /**
     * Gets current
     *
     * @return bool|null
     */
    public function getCurrent()
    {
        return $this->container['current'];
    }

    /**
     * Sets current
     *
     * @param bool|null $current Whether this period is current, such that the current date (in the user's time zone) falls within the date range.
     *
     * @return self
     */
    public function setCurrent($current)
    {
        if (is_null($current)) {
            throw new \InvalidArgumentException('non-nullable current cannot be null');
        }
        $this->container['current'] = $current;

        return $this;
    }

    /**
     * Gets over_budget
     *
     * @return bool|null
     */
    public function getOverBudget()
    {
        return $this->container['over_budget'];
    }

    /**
     * Sets over_budget
     *
     * @param bool|null $over_budget Whether the budget has been exceeded in the period.
     *
     * @return self
     */
    public function setOverBudget($over_budget)
    {
        if (is_null($over_budget)) {
            throw new \InvalidArgumentException('non-nullable over_budget cannot be null');
        }
        $this->container['over_budget'] = $over_budget;

        return $this;
    }

    /**
     * Gets under_budget
     *
     * @return bool|null
     */
    public function getUnderBudget()
    {
        return $this->container['under_budget'];
    }

    /**
     * Sets under_budget
     *
     * @param bool|null $under_budget Whether the budget has not been exceeded in the period.
     *
     * @return self
     */
    public function setUnderBudget($under_budget)
    {
        if (is_null($under_budget)) {
            throw new \InvalidArgumentException('non-nullable under_budget cannot be null');
        }
        $this->container['under_budget'] = $under_budget;

        return $this;
    }

    /**
     * Gets over_by
     *
     * @return float|null
     */
    public function getOverBy()
    {
        return $this->container['over_by'];
    }

    /**
     * Sets over_by
     *
     * @param float|null $over_by How much the budget has been exceeded by in the period.
     *
     * @return self
     */
    public function setOverBy($over_by)
    {
        if (is_null($over_by)) {
            throw new \InvalidArgumentException('non-nullable over_by cannot be null');
        }
        $this->container['over_by'] = $over_by;

        return $this;
    }

    /**
     * Gets under_by
     *
     * @return float|null
     */
    public function getUnderBy()
    {
        return $this->container['under_by'];
    }

    /**
     * Sets under_by
     *
     * @param float|null $under_by How much there is left in the budget for the period.
     *
     * @return self
     */
    public function setUnderBy($under_by)
    {
        if (is_null($under_by)) {
            throw new \InvalidArgumentException('non-nullable under_by cannot be null');
        }
        $this->container['under_by'] = $under_by;

        return $this;
    }

    /**
     * Gets percentage_used
     *
     * @return float|null
     */
    public function getPercentageUsed()
    {
        return $this->container['percentage_used'];
    }

    /**
     * Sets percentage_used
     *
     * @param float|null $percentage_used The percentage of the budget that has been used in the period.
     *
     * @return self
     */
    public function setPercentageUsed($percentage_used)
    {
        if (is_null($percentage_used)) {
            throw new \InvalidArgumentException('non-nullable percentage_used cannot be null');
        }
        $this->container['percentage_used'] = $percentage_used;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


